package project_euler;

public class twelfth_problem {

	public static int factor(long somma_triangolo) {
		int counter=0;
	
		for (long i = 1; i <=somma_triangolo; i++) {
			if(somma_triangolo%i==0) {
				//System.out.println(i);
				counter++;
			}
		}
		return counter;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

			1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
			
			Let us list the factors of the first seven triangle numbers:
			
			 1: 1
			 3: 1,3
			 6: 1,2,3,6
			10: 1,2,5,10
			15: 1,3,5,15
			21: 1,3,7,21
			28: 1,2,4,7,14,28
			We can see that 28 is the first triangle number to have over five divisors.
			
			What is the value of the first triangle number to have over five hundred divisors?*/
		/*int num=76576500;
		int counter=0;
		for (int i = 1; i <=num; i++) {
			if(num%i==0) {
				//System.out.println(i);
				counter++;
			}
		}
		System.out.println(counter);*/
		
		
		int contatore_divisori=0;	
		long somma_triangolo=0;	
		for (long i = 1; true; i++) {
			if(contatore_divisori>500) {
				break;
			}
			somma_triangolo+=i;
			contatore_divisori=factor(somma_triangolo);
			System.out.println(somma_triangolo);
			
		}
		System.out.println(somma_triangolo);
		
	}

}
