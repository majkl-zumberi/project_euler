package project_euler;

import java.math.BigInteger;

public class twentyninth_problem {

	public static boolean checkArray(int[]v, int num) {//controlla se il numero num da inserire nel vettore è già presente
		for (int i = 0; i < v.length; i++) {
			if(v[i]==num) {
				return true;
			}
		}
		return false;
	}
	public static void mostra(int []v) {
		for (int i = 0; i < v.length; i++) {
			System.out.println(v[i]);
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/* non funziona
		 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
		
		2^2=4, 2^3=8, 2^4=16, 2^5=32
		3^2=9, 3^3=27, 3^4=81, 3^5=243
		4^2=16, 4^3=64, 4^4=256, 4^5=1024
		5^2=25, 5^3=125, 5^4=625, 5^5=3125
		If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
		
		4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
		
		How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?*/
		int c=0;
		boolean isAlreadyIn;
		int []  num= new int[9604];//9604
		for (long i = 2; i <=100; i++) {
			for (long j = 2; j <=100; j++) {
				isAlreadyIn=checkArray(num,(int) Math.pow(i, j));
				if(!isAlreadyIn) {
				num[c]=(int) Math.pow(i, j);
				c++;
				}
			}
		}
		mostra(num);
		System.out.println("terms: "+c); 
		System.out.println(Math.pow(100, 100));
	
		 
	}

}
